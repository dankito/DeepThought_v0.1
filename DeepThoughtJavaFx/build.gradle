apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir


apply plugin:'application'


defaultTasks 'run'

dependencies {
    compile project(':DeepThoughtLib')
    compile project(':JavaCouchbaseLiteEntityManager')
    compile project(':JavaSeOrmLiteEntityManager')
    compile project(':LuceneSearchEngine')
    compile project(':WGetFileDownloader')
    compile project(':Boilerpipe')

    compile project(':CouchbaseLiteSyncManager')

//    compile project(':OnlineNewspaperContentExtractor')

    compile 'org.controlsfx:controlsfx:8.20.8'

    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'ch.qos.logback:logback-core:1.1.3'

    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"

    // if you have Java 8_u20 installed you can use Monocle from Maven
//    testCompile "org.testfx:openjfx-monocle:1.8.0_20"
    // otherwise it has to be compiled manually as View introduced a new abstract method
//    testCompile fileTree(dir: 'libs', include: ['*.jar'])
}

mainClassName = 'net.dankito.deepthought.DeepThoughtFx'

def version = '0.1 Beta'
def title = 'Deep Thought'


// create a single Jar with all dependencies. Taken from: http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


apply plugin: 'pmd'

tasks.withType(Pmd) {
    group = "Reporting"
    ignoreFailures = true

    ruleSets = ["java-basic", "java-braces", "java-clone", "java-coupling",
                "java-design", "java-naming", "java-strings"]
}


apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "5.9"
}

tasks.withType(Checkstyle) {
    group = "Reporting"
    ignoreFailures = true

    configFile = new File('../config/checkstyle/checkstyle_checks.xml')
    configProperties = [
            "checkstyle.suppressions.file" : "../config/checkstyle/suppressions.xml"
    ]
}


apply plugin: 'findbugs'

tasks.withType(FindBugs) {
    group = "Reporting"
    ignoreFailures = true
    reportLevel = 'low'

    reports {
        // FindBugs tasks can only have one report enabled
        xml.enabled true
        html.enabled false
    }
}



apply plugin: 'jdepend'

tasks.withType(JDepend) {
    group = "Reporting"

    reports {
        xml.enabled true
    }
}



apply plugin: "jacoco"

//jacoco {
//    toolVersion = "0.7.5.201505241946"
//}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml{
            enabled true
            destination "${buildDir}/reports/jacoco/jacoco.xml"
        }
        csv.enabled false
        html{
            enabled true
            destination "${buildDir}/jacocoHtml"
        }
    }
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

//task jacocoTestReportAfterTests(type: JacocoReport, dependsOn: "test") {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}



apply plugin: "org.sonarqube"

project.tasks["sonarqube"].dependsOn pmdMain, checkstyleMain, findbugsMain, jdependMain, jacocoTestReport
project.tasks["sonarqube"].group "Reporting"


