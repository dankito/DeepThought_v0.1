buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'

//extensions.add("isAndroid", true)
//extensions.properties.put("isAndroid", true) // so that build.gradle in platform neutral projects can distinguish if it's a Java or Android project (as they package resources
//// differently)
//println "DeepThoughtAndroid: isAndroid = " + extensions.properties.get("isAndroid")
//properties.put("isAndroid", true)
//println "DeepThoughtAndroid: isAndroid = " + properties.get("isAndroid")

project.ext.set("isAndroid", true)
println "DeepThoughtAndroid: isAndroid = " + project.isAndroid
System.properties.put("isAndroid", true)

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "net.dankito.deepthought.test"
        minSdkVersion 14 // com.github.clans.fab needs minimum API level 14 (ZXing lib needs at minimum API level 9)
        targetSdkVersion 15
        versionCode 1
        versionName "0.1"
        multiDexEnabled true
    }


    buildTypes {
        release {
//            runProguard false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries = false
    }

    // to solve packaging errors
    packagingOptions {
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE.txt'

        pickFirst 'Strings.properties'
        pickFirst 'Strings_de.properties'

        pickFirst 'META-INF/services/net.deepthought.plugin.IPlugin'
        pickFirst 'der-postillon_icon.png'
        pickFirst 'sz_icon.png'
        exclude 'der-postillon_icon.png Non Licence !.txt'
        exclude 'sz_icon.png Licence.txt'
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        maxProcessCount 4 // this is the default value
        javaMaxHeapSize "3g"
    }
}

//sourceSets {
//    main {
//        resources {
//            output.resourcesDir = output.classesDir
//        }
//    }
//}

apply plugin: 'io.fabric'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}


dependencies {
    compile project(':DeepThoughtAndroidLib')

    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
}


//apply plugin: 'jacoco'
//  jacoco {
//    toolVersion = "0.7.1.201405082137"
//}
//  def coverageSourceDirs = [
//        'src/main/java/com/app/authentication',
//        'src/main/java/com/app/model',
//        'src/main/java/com/app/net',
//        'src/main/java/com/app/provider',
//        'src/main/java/com/app/service',
//        'src/main/java/com/app/text',
//        'src/main/java/com/app/util'
//]
//  task jacocoTestReport(type: JacocoReport, dependsOn: "connectedAndroidTest") {
//    group = "Reporting"
//    description = "Generates Jacoco coverage reports"
//      reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//      classDirectories = fileTree(
//            dir: 'build/intermediates/classes',
//            excludes: ['**/R.class',
//'**/R$*.class',
//'**/BuildConfig.*',
//'**/Manifest*.*',
//'**/*Activity*.*',
//'**/*Fragment*.*'
//]
//)
//sourceDirectories = files(coverageSourceDirs)
//additionalSourceDirs = files(coverageSourceDirs)
//executionData = files('build/jacoco/connectedAndroidTest.exec')
//}